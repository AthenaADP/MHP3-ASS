#include "stdafx.h"
#include "SaveDataEncryption.h"

using namespace System;

typedef long long int64;

array< Byte >^ GetDecryptionTable()
{
	return gcnew array< Byte >
	{
		0xA6, 0x21, 0x22, 0xF9, 0x3D, 0xFB, 0xF5, 0x06,
		0x87, 0x54, 0x76, 0x75, 0xED, 0x16, 0x33, 0x2E,
		0x5A, 0x17, 0x50, 0x1C, 0xDE, 0xAF, 0x73, 0x39,
		0xB5, 0x28, 0xD9, 0xF1, 0xCD, 0x98, 0x5F, 0x2D,
		0x78, 0x62, 0x29, 0xC9, 0xFD, 0xEA, 0x32, 0xCC,
		0x31, 0x70, 0x34, 0x61, 0xAE, 0x4D, 0xFE, 0xC2,
		0x45, 0x24, 0xF8, 0xFC, 0xD7, 0x2F, 0xD8, 0x26,
		0x59, 0xA0, 0xBD, 0xA5, 0x01, 0x18, 0xA1, 0x95,
		0xEE, 0x4B, 0x1A, 0x7A, 0x5B, 0xDB, 0xF0, 0x27,
		0xE6, 0xF4, 0xB2, 0xAD, 0x4A, 0x14, 0x9A, 0x20,
		0xB9, 0x36, 0x4F, 0x3B, 0xCA, 0xE4, 0x41, 0x85,
		0x3A, 0x46, 0x5C, 0xCB, 0x3C, 0xEC, 0x63, 0x84,
		0x66, 0xC4, 0xEB, 0x25, 0xAA, 0x7E, 0xC3, 0x47,
		0x9B, 0x74, 0x8B, 0x5D, 0x23, 0x8F, 0x72, 0x81,
		0x8C, 0x56, 0xC6, 0xD4, 0x40, 0x60, 0xA2, 0x6D,
		0xE5, 0xB0, 0x15, 0x58, 0x52, 0x0F, 0x7D, 0x67,
		0xEF, 0xD2, 0x0B, 0xCF, 0x0D, 0xD6, 0x2B, 0x0A,
		0x9F, 0x80, 0x5E, 0x3F, 0x71, 0x68, 0x05, 0x86,
		0xBB, 0x38, 0xCE, 0x7F, 0xF3, 0x83, 0x03, 0x48,
		0xD3, 0xFA, 0x35, 0xDF, 0x44, 0x7C, 0x82, 0x93,
		0x53, 0xA3, 0x09, 0x6A, 0x77, 0x13, 0x55, 0xDD,
		0xBE, 0x00, 0x9C, 0xB4, 0xE3, 0x9E, 0xBC, 0x96,
		0xA7, 0xE2, 0x42, 0x4E, 0x37, 0x0E, 0xF6, 0x9D,
		0x1B, 0x2A, 0x79, 0xBF, 0xDC, 0xA9, 0x88, 0x4C,
		0xD0, 0xAB, 0xC5, 0x69, 0xD1, 0xE1, 0xAC, 0xE9,
		0xC1, 0xB6, 0x7B, 0x57, 0x90, 0x07, 0x30, 0x92,
		0xB7, 0x1E, 0xDA, 0x49, 0x0C, 0xB8, 0xA4, 0xFF,
		0xB3, 0xF2, 0x64, 0x8A, 0xC7, 0x02, 0x6C, 0x08,
		0x6F, 0xF7, 0x89, 0xC0, 0x10, 0xA8, 0x8D, 0xBA,
		0x91, 0x43, 0x6B, 0x3E, 0xD5, 0x65, 0xE0, 0x6E,
		0x12, 0x2C, 0x94, 0x99, 0xE8, 0x1F, 0xC8, 0x11,
		0x8E, 0xB1, 0xE7, 0x51, 0x1D, 0x97, 0x04, 0x19
	};
}

const int64 seed_a = 0x215F;
const int64 seed_b = 0xDFA3;
const int64 mod_a = 0xFF8F;
const int64 mod_b = 0xFFEF;

#define SAVE_DATA_KEY "VQ(DOdIO9?X3!2GmW#XF";

void set_table_value( array< Byte >^ table, int pos, int64 value )
{
	table[ pos + 0 ] = (Byte) value;
	table[ pos + 1 ] = (Byte) (value >> 8);
	table[ pos + 2 ] = (Byte) (value >> 16);
	table[ pos + 3 ] = (Byte) (value >> 24);
}

long get_table_value( array< Byte >^ table, int pos )
{
	return  (table[pos + 0] & 0xFF)
		+ ( (table[pos + 1] & 0xFF) << 8)
		+ ( (table[pos + 2] & 0xFF) << 16)
		+ ( (table[pos + 3] & 0xFF) << 24);
}

void get_table_value( array< Byte >^ table, array< Byte >^ buffer )
{
	buffer[0] = table[buffer[0] & 0xFF];
	buffer[1] = table[buffer[1] & 0xFF];
	buffer[2] = table[buffer[2] & 0xFF];
	buffer[3] = table[buffer[3] & 0xFF];
}

void set_table_data( array< Byte >^ table, array< Byte >^ base_table, const int i )
{
	table[i + 0] = base_table[table[i + 0] & 0xFF];
	table[i + 1] = base_table[table[i + 1] & 0xFF];
	table[i + 2] = base_table[table[i + 2] & 0xFF];
	table[i + 3] = base_table[table[i + 3] & 0xFF];
}

void EncryptSaveData( array< Byte >^ data )
{

}

void DecryptSaveData( array< Byte >^ data )
{
	const int len = data->Length - 4;
	array< Byte >^ seed = { 0, 0, 0, 0 };
	array< Byte >::Copy( data, len, seed, 0, 4 );
	array< Byte >^ decrypt_table = GetDecryptionTable();
	get_table_value( decrypt_table, seed );
	get_table_value( decrypt_table, seed );
	int64 alpha = get_table_value( seed, 0 );

	int64 lower_offset = alpha & 0xFFFF;
	int64 upper_offset = ( alpha >> 0x10 ) & 0xFFFF;

	if( lower_offset == 0 )
		lower_offset = seed_a;

	if( upper_offset == 0 )
		upper_offset = seed_b;

	for( int i = 0; i < len; i += 4 )
	{
		set_table_data( data, decrypt_table, i );
		alpha = get_table_value( data, i );
		lower_offset = ( lower_offset * seed_a ) % mod_a;
		upper_offset = ( upper_offset * seed_b ) % mod_b;
		int64 beta = lower_offset + ( upper_offset << 0x10 );
		int64 gamma = alpha ^ beta;
		set_table_value( data, i, gamma );
		set_table_data( data, decrypt_table, i );
	}
	seed->CopyTo( data, len );
}
